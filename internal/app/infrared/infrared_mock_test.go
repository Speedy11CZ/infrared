// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/haveachin/infrared/internal/app/infrared (interfaces: Conn,ConnProcessor,Player,Server,Version)

// Package infrared_test is a generated GoMock package.
package infrared_test

import (
	net "net"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	infrared "github.com/haveachin/infrared/internal/app/infrared"
)

// MockConn is a mock of Conn interface.
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn.
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance.
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConn)(nil).Close))
}

// Edition mocks base method.
func (m *MockConn) Edition() infrared.Edition {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edition")
	ret0, _ := ret[0].(infrared.Edition)
	return ret0
}

// Edition indicates an expected call of Edition.
func (mr *MockConnMockRecorder) Edition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edition", reflect.TypeOf((*MockConn)(nil).Edition))
}

// GatewayID mocks base method.
func (m *MockConn) GatewayID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GatewayID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GatewayID indicates an expected call of GatewayID.
func (mr *MockConnMockRecorder) GatewayID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GatewayID", reflect.TypeOf((*MockConn)(nil).GatewayID))
}

// LocalAddr mocks base method.
func (m *MockConn) LocalAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr.
func (mr *MockConnMockRecorder) LocalAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockConn)(nil).LocalAddr))
}

// Pipe mocks base method.
func (m *MockConn) Pipe(arg0 net.Conn) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pipe", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pipe indicates an expected call of Pipe.
func (mr *MockConnMockRecorder) Pipe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pipe", reflect.TypeOf((*MockConn)(nil).Pipe), arg0)
}

// Read mocks base method.
func (m *MockConn) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockConnMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockConn)(nil).Read), arg0)
}

// RemoteAddr mocks base method.
func (m *MockConn) RemoteAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr.
func (mr *MockConnMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockConn)(nil).RemoteAddr))
}

// SetDeadline mocks base method.
func (m *MockConn) SetDeadline(arg0 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline.
func (mr *MockConnMockRecorder) SetDeadline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockConn)(nil).SetDeadline), arg0)
}

// SetReadDeadline mocks base method.
func (m *MockConn) SetReadDeadline(arg0 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline.
func (mr *MockConnMockRecorder) SetReadDeadline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockConn)(nil).SetReadDeadline), arg0)
}

// SetWriteDeadline mocks base method.
func (m *MockConn) SetWriteDeadline(arg0 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline.
func (mr *MockConnMockRecorder) SetWriteDeadline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockConn)(nil).SetWriteDeadline), arg0)
}

// Write mocks base method.
func (m *MockConn) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockConnMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockConn)(nil).Write), arg0)
}

// MockConnProcessor is a mock of ConnProcessor interface.
type MockConnProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockConnProcessorMockRecorder
}

// MockConnProcessorMockRecorder is the mock recorder for MockConnProcessor.
type MockConnProcessorMockRecorder struct {
	mock *MockConnProcessor
}

// NewMockConnProcessor creates a new mock instance.
func NewMockConnProcessor(ctrl *gomock.Controller) *MockConnProcessor {
	mock := &MockConnProcessor{ctrl: ctrl}
	mock.recorder = &MockConnProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnProcessor) EXPECT() *MockConnProcessorMockRecorder {
	return m.recorder
}

// ClientTimeout mocks base method.
func (m *MockConnProcessor) ClientTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// ClientTimeout indicates an expected call of ClientTimeout.
func (mr *MockConnProcessorMockRecorder) ClientTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientTimeout", reflect.TypeOf((*MockConnProcessor)(nil).ClientTimeout))
}

// ProcessConn mocks base method.
func (m *MockConnProcessor) ProcessConn(arg0 net.Conn) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessConn", arg0)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessConn indicates an expected call of ProcessConn.
func (mr *MockConnProcessorMockRecorder) ProcessConn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessConn", reflect.TypeOf((*MockConnProcessor)(nil).ProcessConn), arg0)
}

// MockPlayer is a mock of Player interface.
type MockPlayer struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerMockRecorder
}

// MockPlayerMockRecorder is the mock recorder for MockPlayer.
type MockPlayerMockRecorder struct {
	mock *MockPlayer
}

// NewMockPlayer creates a new mock instance.
func NewMockPlayer(ctrl *gomock.Controller) *MockPlayer {
	mock := &MockPlayer{ctrl: ctrl}
	mock.recorder = &MockPlayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayer) EXPECT() *MockPlayerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPlayer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPlayerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPlayer)(nil).Close))
}

// DisconnectServerNotFound mocks base method.
func (m *MockPlayer) DisconnectServerNotFound() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectServerNotFound")
	ret0, _ := ret[0].(error)
	return ret0
}

// DisconnectServerNotFound indicates an expected call of DisconnectServerNotFound.
func (mr *MockPlayerMockRecorder) DisconnectServerNotFound() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectServerNotFound", reflect.TypeOf((*MockPlayer)(nil).DisconnectServerNotFound))
}

// Edition mocks base method.
func (m *MockPlayer) Edition() infrared.Edition {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edition")
	ret0, _ := ret[0].(infrared.Edition)
	return ret0
}

// Edition indicates an expected call of Edition.
func (mr *MockPlayerMockRecorder) Edition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edition", reflect.TypeOf((*MockPlayer)(nil).Edition))
}

// GatewayID mocks base method.
func (m *MockPlayer) GatewayID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GatewayID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GatewayID indicates an expected call of GatewayID.
func (mr *MockPlayerMockRecorder) GatewayID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GatewayID", reflect.TypeOf((*MockPlayer)(nil).GatewayID))
}

// IsLoginRequest mocks base method.
func (m *MockPlayer) IsLoginRequest() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLoginRequest")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLoginRequest indicates an expected call of IsLoginRequest.
func (mr *MockPlayerMockRecorder) IsLoginRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLoginRequest", reflect.TypeOf((*MockPlayer)(nil).IsLoginRequest))
}

// LocalAddr mocks base method.
func (m *MockPlayer) LocalAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr.
func (mr *MockPlayerMockRecorder) LocalAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockPlayer)(nil).LocalAddr))
}

// MatchedAddr mocks base method.
func (m *MockPlayer) MatchedAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchedAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// MatchedAddr indicates an expected call of MatchedAddr.
func (mr *MockPlayerMockRecorder) MatchedAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchedAddr", reflect.TypeOf((*MockPlayer)(nil).MatchedAddr))
}

// Pipe mocks base method.
func (m *MockPlayer) Pipe(arg0 net.Conn) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pipe", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pipe indicates an expected call of Pipe.
func (mr *MockPlayerMockRecorder) Pipe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pipe", reflect.TypeOf((*MockPlayer)(nil).Pipe), arg0)
}

// Read mocks base method.
func (m *MockPlayer) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockPlayerMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockPlayer)(nil).Read), arg0)
}

// RemoteAddr mocks base method.
func (m *MockPlayer) RemoteAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr.
func (mr *MockPlayerMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockPlayer)(nil).RemoteAddr))
}

// RemoteIP mocks base method.
func (m *MockPlayer) RemoteIP() net.IP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteIP")
	ret0, _ := ret[0].(net.IP)
	return ret0
}

// RemoteIP indicates an expected call of RemoteIP.
func (mr *MockPlayerMockRecorder) RemoteIP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteIP", reflect.TypeOf((*MockPlayer)(nil).RemoteIP))
}

// RequestedAddr mocks base method.
func (m *MockPlayer) RequestedAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestedAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// RequestedAddr indicates an expected call of RequestedAddr.
func (mr *MockPlayerMockRecorder) RequestedAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestedAddr", reflect.TypeOf((*MockPlayer)(nil).RequestedAddr))
}

// ServerID mocks base method.
func (m *MockPlayer) ServerID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServerID indicates an expected call of ServerID.
func (mr *MockPlayerMockRecorder) ServerID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerID", reflect.TypeOf((*MockPlayer)(nil).ServerID))
}

// SetDeadline mocks base method.
func (m *MockPlayer) SetDeadline(arg0 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline.
func (mr *MockPlayerMockRecorder) SetDeadline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockPlayer)(nil).SetDeadline), arg0)
}

// SetMatchedAddr mocks base method.
func (m *MockPlayer) SetMatchedAddr(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMatchedAddr", arg0)
}

// SetMatchedAddr indicates an expected call of SetMatchedAddr.
func (mr *MockPlayerMockRecorder) SetMatchedAddr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMatchedAddr", reflect.TypeOf((*MockPlayer)(nil).SetMatchedAddr), arg0)
}

// SetReadDeadline mocks base method.
func (m *MockPlayer) SetReadDeadline(arg0 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline.
func (mr *MockPlayerMockRecorder) SetReadDeadline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockPlayer)(nil).SetReadDeadline), arg0)
}

// SetWriteDeadline mocks base method.
func (m *MockPlayer) SetWriteDeadline(arg0 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline.
func (mr *MockPlayerMockRecorder) SetWriteDeadline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockPlayer)(nil).SetWriteDeadline), arg0)
}

// Username mocks base method.
func (m *MockPlayer) Username() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Username")
	ret0, _ := ret[0].(string)
	return ret0
}

// Username indicates an expected call of Username.
func (mr *MockPlayerMockRecorder) Username() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Username", reflect.TypeOf((*MockPlayer)(nil).Username))
}

// Version mocks base method.
func (m *MockPlayer) Version() infrared.Version {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(infrared.Version)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockPlayerMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockPlayer)(nil).Version))
}

// Write mocks base method.
func (m *MockPlayer) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockPlayerMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockPlayer)(nil).Write), arg0)
}

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// Domains mocks base method.
func (m *MockServer) Domains() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Domains")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Domains indicates an expected call of Domains.
func (mr *MockServerMockRecorder) Domains() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domains", reflect.TypeOf((*MockServer)(nil).Domains))
}

// Edition mocks base method.
func (m *MockServer) Edition() infrared.Edition {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edition")
	ret0, _ := ret[0].(infrared.Edition)
	return ret0
}

// Edition indicates an expected call of Edition.
func (mr *MockServerMockRecorder) Edition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edition", reflect.TypeOf((*MockServer)(nil).Edition))
}

// GatewayIDs mocks base method.
func (m *MockServer) GatewayIDs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GatewayIDs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GatewayIDs indicates an expected call of GatewayIDs.
func (mr *MockServerMockRecorder) GatewayIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GatewayIDs", reflect.TypeOf((*MockServer)(nil).GatewayIDs))
}

// HandleConn mocks base method.
func (m *MockServer) HandleConn(arg0 net.Conn) (infrared.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleConn", arg0)
	ret0, _ := ret[0].(infrared.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleConn indicates an expected call of HandleConn.
func (mr *MockServerMockRecorder) HandleConn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleConn", reflect.TypeOf((*MockServer)(nil).HandleConn), arg0)
}

// ID mocks base method.
func (m *MockServer) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockServerMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockServer)(nil).ID))
}

// MockVersion is a mock of Version interface.
type MockVersion struct {
	ctrl     *gomock.Controller
	recorder *MockVersionMockRecorder
}

// MockVersionMockRecorder is the mock recorder for MockVersion.
type MockVersionMockRecorder struct {
	mock *MockVersion
}

// NewMockVersion creates a new mock instance.
func NewMockVersion(ctrl *gomock.Controller) *MockVersion {
	mock := &MockVersion{ctrl: ctrl}
	mock.recorder = &MockVersionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersion) EXPECT() *MockVersionMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockVersion) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockVersionMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockVersion)(nil).Name))
}

// ProtocolNumber mocks base method.
func (m *MockVersion) ProtocolNumber() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtocolNumber")
	ret0, _ := ret[0].(int32)
	return ret0
}

// ProtocolNumber indicates an expected call of ProtocolNumber.
func (mr *MockVersionMockRecorder) ProtocolNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtocolNumber", reflect.TypeOf((*MockVersion)(nil).ProtocolNumber))
}
