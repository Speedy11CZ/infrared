basePath: /v1
definitions:
  api.errorDTO:
    properties:
      message:
        type: string
    type: object
  api.getConfigs.respDTO:
    properties:
      docker:
        additionalProperties: {}
        type: object
      file:
        additionalProperties:
          additionalProperties: {}
          type: object
        type: object
    type: object
  api.getPlayerHandler.respDTO:
    properties:
      gatewayId:
        example: default
        type: string
      localAddress:
        example: 127.0.0.1:54265
        type: string
      matchedAddress:
        example: '*.example.com'
        type: string
      remoteAddress:
        example: 123.45.67.89:45372
        type: string
      requestedAddress:
        example: mc.example.com
        type: string
      serverId:
        example: default
        type: string
      username:
        example: H4v34ch1n
        type: string
      version:
        example: 1.19.3
        type: string
    type: object
  api.getPlayersHandler.respDTOItem:
    properties:
      gatewayId:
        example: default
        type: string
      remoteAddress:
        example: 123.45.67.89:45372
        type: string
      serverId:
        example: default
        type: string
      username:
        example: H4v34ch1n
        type: string
    type: object
info:
  contact: {}
  description: API that is baked into Infrared via internal plugin.
  license:
    name: AGPL-3.0
    url: https://www.gnu.org/licenses/agpl-3.0.txt
  title: Infrared API
  version: "1.0"
paths:
  /{edition}/players:
    get:
      description: Query players per edition and filter them by username via regular
        expression
      parameters:
      - description: Minecraft edition
        enum:
        - java
        - bedrock
        in: path
        name: edition
        required: true
        type: string
      - description: A regular expression to query usernames
        in: query
        name: usernameRegex
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.getPlayersHandler.respDTOItem'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorDTO'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.errorDTO'
      summary: Query players per edition
      tags:
      - Player
  /{edition}/players/{username}:
    delete:
      description: Disconnect a player by edition via username
      parameters:
      - description: Minecraft edition
        enum:
        - java
        - bedrock
        in: path
        name: edition
        required: true
        type: string
      - description: Player username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorDTO'
        "404":
          description: Not Found
      summary: Disconnect a player
      tags:
      - Player
    get:
      description: Get a player for an edition by username
      parameters:
      - description: Minecraft edition
        enum:
        - java
        - bedrock
        in: path
        name: edition
        required: true
        type: string
      - description: Player username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.getPlayerHandler.respDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorDTO'
        "404":
          description: Not Found
      summary: Get a player
      tags:
      - Player
  /configs:
    get:
      description: Get all configs from all providers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.getConfigs.respDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorDTO'
      summary: Get all configs
      tags:
      - Config
  /configs/{configId}:
    delete:
      description: Delete a config via ID
      parameters:
      - description: Config ID
        in: path
        name: configId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorDTO'
      summary: Delete a config
      tags:
      - Config
    get:
      description: Get a config via ID
      parameters:
      - description: Config ID
        in: path
        name: configId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: See the documentation or configs folder for more info on this
            complex struct
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorDTO'
      summary: Get a config
      tags:
      - Config
    put:
      consumes:
      - application/json
      description: Create/Update a config via ID
      parameters:
      - description: Config
        in: body
        name: request
        required: true
        schema:
          additionalProperties: true
          type: object
      - description: Config ID
        in: path
        name: configId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: See the documentation or configs folder for more info on this
            complex struct
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorDTO'
      summary: Create/Update a config
      tags:
      - Config
  /configs/reload:
    post:
      description: Reads all configs and reloads Infrared
      produces:
      - application/json
      responses:
        "200":
          description: See the documentation or configs folder for more info on this
            complex struct
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorDTO'
      summary: Reloads Infrared
      tags:
      - Config
swagger: "2.0"
