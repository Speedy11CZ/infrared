openapi: '3.0.2'
info:
  title: Infrared API
  description: API that is baked into Infrared via internal plugin.
  version: '1.0'
  x-logo: 
    url: /logo.svg
servers:
  - url: /v1
paths:
  /{edition}/players:
    get:
      tags:
        - Player
      summary: Query players per edition
      parameters:
        - $ref: '#/components/parameters/Edition'
        - $ref: '#/components/parameters/UsernameRegex'
      responses:
        '200':
          $ref: '#/components/responses/PlayerItems'
        '400':
          $ref: '#/components/responses/BadRequest'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /{edition}/players/{username}:
    get:
      tags:
        - Player
      summary: Get a player
      parameters:
        - $ref: '#/components/parameters/Edition'
        - $ref: '#/components/parameters/Username'
      responses:
        '200':
          $ref: '#/components/responses/Player'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Player not found
    delete:
      tags:
        - Player
      summary: Disconnect a player
      parameters:
        - $ref: '#/components/parameters/Edition'
        - $ref: '#/components/parameters/Username'
      responses:
        '204':
          description: No content
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Player not found
  /configs:
    get:
      tags:
        - "Config"
      summary: Get all configs
      responses:
        '200':
          $ref: '#/components/responses/Configs'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /configs/{configId}:
    get:
      tags:
        - "Config"
      summary: Get a config
      parameters:
        - $ref: '#/components/parameters/ConfigID'
      responses:
        '200':
          $ref: '#/components/responses/Config'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - "Config"
      summary: Create/Update a config
      parameters:
        - $ref: '#/components/parameters/ConfigID'
      responses:
        '201':
          $ref: '#/components/responses/Config'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - "Config"
      summary: Delete a config
      responses:
        '204':
          description: No content
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  responses:
    Player:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Player'
    PlayerItems:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PlayerItem'
    Config:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Config'
    Configs:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Configs'
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnprocessableEntity:
      description: Unprocessable entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  parameters:
    Edition:
      name: edition
      in: path
      description: Minecraft edition
      required: true
      schema:
        type: string
        enum:
          - java
          - bedrock
    Username:
      name: username
      in: path
      description: Players username
      required: true
      schema:
        type: string
    UsernameRegex:
      name: usernameRegex
      description: A regular expression to query usernames
      in: query
      required: false
      schema:
        type: string
    ConfigID:
      name: configId
      in: path
      description: URL encoded config path
      example: proxies%2Fjava-example.yml
      required: true
      schema:
        type: string
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
          example: an error has occurred
    Player:
      type: object
      properties:
        username:
          type: string
          example: H4v34ch1n
        gatewayId:
          type: string
          example: default
        remoteAddress:
          type: string
          example: 123.45.67.89:43553
        localAddress:
          type: string
          example: 127.0.0.1:58392
        version:
          type: string
          example: 1.19.3
        serverId:
          type: string
          example: default
        matchedAddress:
          type: string
          example: '*.example.com'
        requestedAddress:
          type: string
          example: mc.example.com
    PlayerItem:
      type: object
      properties:
        username:
          type: string
          example: H4v34ch1n
        gatewayId:
          type: string
          example: default
        remoteAddress:
          type: string
          example: 123.45.67.89:43553
        serverId:
          type: string
          example: default
    Config:
      type: object
      properties:
        info:
          type: string
          example: See the Infrared configs directory for more info on how this complex object can look like.
    Configs:
      type: object
      properties:
        files:
          type: array
          items:
            $ref: '#/components/schemas/Config'
        docker:
          $ref: '#/components/schemas/Config'